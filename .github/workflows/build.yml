name: Build FAT Binaries

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build-linux-amd64:
    runs-on: ubuntu-latest
    container:
      image: debian:11

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt packages (amd64)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-amd64-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-amd64-

      - name: Install Linux dependencies (amd64)
        run: |
          apt-get update
          apt-get install -y \
            git \
            wget \
            file \
            build-essential \
            gcc \
            make \
            libmagic-dev \
            libncursesw5-dev \
            libzip-dev \
            libtar-dev \
            fuse \
            zip

      - name: Build for Linux amd64
        run: |
          make clean
          make release
          mkdir -p dist
          cp bin/fat-release dist/fat-x86_64

      - name: Download linuxdeploy AppImage
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage

      - name: Extract linuxdeploy AppImage (no FUSE)
        run: |
          ./linuxdeploy-x86_64.AppImage --appimage-extract
          mv squashfs-root linuxdeploy-extracted

      - name: Patch Makefile to avoid using FUSE-based AppImage
        run: |
          sed -i 's|./linuxdeploy-x86_64.AppImage|./linuxdeploy-extracted/AppRun|g' Makefile

      - name: Build AppImage
        run: |
          make clean
          make appimage
          mkdir -p dist
          mv fat-*.AppImage dist/FAT.AppImage

      - name: Upload Linux amd64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-amd64
          path: dist/*

      - name: Verify binary architecture (amd64)
        run: |
          file dist/fat-x86_64

  build-linux-arm64:
    runs-on: ubuntu-latest
    container:
      image: debian:11

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt packages (arm64)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-arm64-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-arm64-

      - name: Install Linux dependencies (arm64)
        run: |
          dpkg --add-architecture arm64
          apt-get update
          apt-get install -y \
            git \
            wget \
            file \
            build-essential \
            make \
            gcc-aarch64-linux-gnu \
            libmagic-dev:arm64 \
            libncursesw5-dev:arm64 \
            libzip-dev:arm64 \
            libtar-dev:arm64 \
            zip # <-- ADDED THIS LINE

      - name: Build for Linux arm64
        run: |
          make clean
          CC=aarch64-linux-gnu-gcc make release
          mkdir -p dist
          cp bin/fat-release dist/fat-arm64

      - name: Upload Linux arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-binaries-arm64
          path: dist/fat-arm64

      - name: Verify binary architecture (arm64)
        run: |
          file dist/fat-arm64

  build-macos:
    runs-on: macos-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('**/Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      - name: Install macOS dependencies
        run: |
          brew update
          brew install gcc make libmagic ncurses libzip libtool libtar zip # <-- ADDED zip HERE TOO

      - name: Build for macOS arm64
        run: |
          make clean
          make release
          mkdir -p dist
          cp bin/fat-release dist/fat-macos-arm64

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-binary
          path: dist/fat-macos-arm64

      - name: Verify binary architecture
        run: |
          file dist/fat-macos-arm64

  commit-dist:
    needs: [build-linux-amd64, build-linux-arm64, build-macos]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux amd64 artifacts
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-amd64
          path: dist

      - name: Download Linux arm64 artifact
        uses: actions/download-artifact@v4
        with:
          name: linux-binaries-arm64
          path: dist

      - name: Download macOS artifact
        uses: actions/download-artifact@v4
        with:
          name: macos-binary
          path: dist

      - name: Set up Git user
        run: |
          git config --global user.email "fat-bot@fynjirby.dev"
          git config --global user.name "FAT Bot"

      - name: Commit and push dist binaries
        run: |
          git fetch origin main
          git checkout main
          git add dist/
          git commit -m "ci: update dist binaries [skip ci]" || echo "No changes to commit"
          git push origin main
