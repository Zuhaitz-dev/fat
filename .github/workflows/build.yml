name: Build FAT Binaries

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  clean-dist:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Clean dist directory
        run: rm -rf dist && mkdir -p dist

  build-linux-amd64:
    needs: clean-dist
    runs-on: ubuntu-latest
    container:
      image: debian:11
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt packages (amd64)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-amd64-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-amd64-

      - name: Install Linux dependencies (amd64)
        run: |
          apt-get update
          apt-get install -y \
            git wget file build-essential gcc make \
            libmagic-dev libncursesw5-dev libzip-dev libtar-dev fuse tar

      - name: Build for Linux amd64
        run: |
          make clean
          make release

      - name: Create Linux amd64 distributable package
        run: |
          mkdir -p package/bin package/lib/fat/plugins package/share/fat/themes
          cp bin/fat-release package/bin/fat
          cp lib/libfat_utils.so package/lib/
          cp plugins/*.so package/lib/fat/plugins/
          cp themes/*.json package/share/fat/themes/
          cd package
          tar -czvf ../fat-linux-x86_64.tar.gz .
          cd ..

      - name: Build AppImage (Reliable FUSE-less method)
        run: |
          # Download and extract linuxdeploy to avoid FUSE issues
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
          chmod +x linuxdeploy-x86_64.AppImage
          ./linuxdeploy-x86_64.AppImage --appimage-extract

          # Run the extracted AppRun to build the AppImage
          ./squashfs-root/AppRun --appdir AppDir --executable bin/fat-release --output appimage

      - name: Upload Linux amd64 artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-amd64-dist
          path: |
            fat-linux-x86_64.tar.gz
            fat-*.AppImage

      - name: Verify binary architecture (amd64)
        run: file package/bin/fat

  build-linux-arm64:
    needs: clean-dist
    runs-on: ubuntu-latest
    container:
      image: debian:11
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache apt packages (arm64)
        uses: actions/cache@v4
        with:
          path: /var/cache/apt/archives
          key: ${{ runner.os }}-apt-arm64-${{ hashFiles('**/lockfiles') }}
          restore-keys: |
            ${{ runner.os }}-apt-arm64-

      - name: Install Linux dependencies (arm64)
        run: |
          dpkg --add-architecture arm64
          apt-get update
          apt-get install -y \
            git wget file build-essential make tar \
            gcc-aarch64-linux-gnu \
            libmagic-dev:arm64 libncursesw5-dev:arm64 libzip-dev:arm64 libtar-dev:arm64

      - name: Build for Linux arm64
        run: |
          make clean
          CC=aarch64-linux-gnu-gcc make release

      - name: Create Linux arm64 distributable package
        run: |
          mkdir -p package/bin package/lib/fat/plugins package/share/fat/themes
          cp bin/fat-release package/bin/fat
          cp lib/libfat_utils.so package/lib/
          cp plugins/*.so package/lib/fat/plugins/
          cp themes/*.json package/share/fat/themes/
          cd package
          tar -czvf ../fat-linux-arm64.tar.gz .
          cd ..

      - name: Upload Linux arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-dist
          path: fat-linux-arm64.tar.gz

      - name: Verify binary architecture (arm64)
        run: file package/bin/fat

  build-macos:
    needs: clean-dist
    runs-on: macos-13
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Cache Homebrew packages
        uses: actions/cache@v4
        with:
          path: ~/Library/Caches/Homebrew
          key: ${{ runner.os }}-brew-${{ hashFiles('**/Brewfile') }}
          restore-keys: |
            ${{ runner.os }}-brew-

      - name: Install macOS dependencies
        run: |
          brew update
          brew install gcc make libmagic ncurses libzip libtool libtar

      - name: Build for macOS arm64
        run: |
          make clean
          make release

      - name: Create macOS distributable package
        run: |
          # 1. Create the directory structure for our package
          mkdir -p dist/package/bin
          mkdir -p dist/package/lib/fat/plugins
          mkdir -p dist/package/share/fat/themes

          # 2. Copy the main executable, themes, and plugins
          cp bin/fat-release dist/package/bin/fat
          cp themes/*.json dist/package/share/fat/themes/
          cp plugins/*.dylib dist/package/lib/fat/plugins/
          cp lib/libfat_utils.dylib dist/package/lib/

          # 3. Identify and copy required Homebrew libraries
          LIBS=$(otool -L bin/fat-release | grep /usr/local | awk '{print $1}')
          for lib in $LIBS; do
            cp "$lib" dist/package/lib/
          done

          # 4. Fix library paths in the main executable
          for lib in $LIBS; do
            lib_name=$(basename "$lib")
            install_name_tool -change "$lib" "@executable_path/../lib/$lib_name" dist/package/bin/fat
          done
          install_name_tool -change "lib/libfat_utils.dylib" "@executable_path/../lib/libfat_utils.dylib" dist/package/bin/fat

          # 5. Fix library paths within the bundled libraries themselves
          cd dist/package/lib
          for dylib in *.dylib; do
            install_name_tool -id "@rpath/$dylib" "$dylib"
            DEPS=$(otool -L "$dylib" | grep /usr/local | awk '{print $1}')
            for dep in $DEPS; do
              dep_name=$(basename "$dep")
              install_name_tool -change "$dep" "@rpath/$dep_name" "$dylib"
            done
          done
          cd ../../.. # Go back to the root directory

          # 6. Create a ZIP archive of the package
          cd dist/package
          zip -r ../fat-macos-arm64.zip .
          cd ../..

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-dist
          path: dist/fat-macos-arm64.zip

      - name: Verify binary architecture
        run: file dist/package/bin/fat
